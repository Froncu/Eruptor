#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#define LOCAL_SIZE_X 16
#define LOCAL_SIZE_Y 16
#define LOCAL_SIZE_Z 1
#define HISTOGRAM_BIN_COUNT (LOCAL_SIZE_X * LOCAL_SIZE_Y * LOCAL_SIZE_Z)

layout(push_constant) uniform PushConstants {
   uint current_frame;
} push_constants;

layout(set = 0, binding = 0) uniform sampler texture_sampler;
layout(set = 0, binding = 1) uniform texture2D hdr_textures[];
layout(set = 1, binding = 0) writeonly buffer HistogramBuffer {
   uint bins[];
} histogram_buffer;

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

shared uint histogram_shared[HISTOGRAM_BIN_COUNT];

uint color_to_bin(vec3 hdr_color)
{
   // TODO: pass these values from the application
   const float minimal_log_luminance = -4.0;
   const float inverse_log_luminance_range = 0.0625;
   
   const float luminance = dot(hdr_color, vec3(0.2125, 0.7154, 0.0721));
   if (luminance < 0.005)
      return 0;
   
   const float log_luminance = clamp((log2(luminance) - minimal_log_luminance) * inverse_log_luminance_range, 0.0, 1.0);
   return uint(log_luminance * (HISTOGRAM_BIN_COUNT - 2) + 1.0);
}

void main()
{
   histogram_shared[gl_LocalInvocationIndex] = 0;
   barrier();

   const uvec2 dimensions = textureSize(sampler2D(hdr_textures[push_constants.current_frame], texture_sampler), 0);
   const uvec2 coordinates = gl_GlobalInvocationID.xy;
   
   if (coordinates.x < dimensions.x && coordinates.y < dimensions.y)
   {
      const vec3 hdr_color = 
         texelFetch(sampler2D(hdr_textures[push_constants.current_frame], texture_sampler), ivec2(coordinates), 0).rgb;
      
      const uint bin_index = color_to_bin(hdr_color);
      atomicAdd(histogram_shared[bin_index], 1);
   }
   barrier();

   atomicAdd(histogram_buffer.bins[gl_LocalInvocationIndex], histogram_shared[gl_LocalInvocationIndex]);
}
